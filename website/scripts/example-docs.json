[
    {
        "contents": "---\ntitle: 'Create Plant'\nopenapi: 'POST /plants'\n---\n",
        "relativePath": "api-reference/endpoint/create.mdx"
    },
    {
        "contents": "---\ntitle: 'Delete Plant'\nopenapi: 'DELETE /plants/{id}'\n---\n",
        "relativePath": "api-reference/endpoint/delete.mdx"
    },
    {
        "contents": "---\ntitle: 'Get Plants'\nopenapi: 'GET /plants'\n---\n",
        "relativePath": "api-reference/endpoint/get.mdx"
    },
    {
        "contents": "---\ntitle: 'New Plant'\nopenapi: 'WEBHOOK /plant/webhook'\n---\n",
        "relativePath": "api-reference/endpoint/webhook.mdx"
    },
    {
        "contents": "---\ntitle: 'Introduction'\ndescription: 'Example section for showcasing API endpoints'\n---\n\n<Note>\n  If you're not looking to build API reference documentation, you can delete\n  this section by removing the api-reference folder.\n</Note>\n\n## Welcome\n\nThere are two ways to build API documentation: [OpenAPI](https://fumabase.com/docs/api-playground/openapi/setup) and [MDX components](https://fumabase.com/docs/api-playground/mdx/configuration). For the starter kit, we are using the following OpenAPI specification.\n\n<Card\n  title=\"Plant Store Endpoints\"\n  icon=\"leaf\"\n  href=\"https://github.com/fumabase/starter/blob/main/api-reference/openapi.json\"\n>\n  View the OpenAPI specification file\n</Card>\n\n## Authentication\n\nAll API endpoints are authenticated using Bearer tokens and picked up from the specification file.\n\n```json\n\"security\": [\n  {\n    \"bearerAuth\": []\n  }\n]\n```\n",
        "relativePath": "api-reference/introduction.mdx"
    },
    {
        "contents": "---\ntitle: 'Development'\ndescription: 'Preview changes locally to update your docs'\n---\n\n<Info>\n  **Prerequisite**: Please install Node.js (version 19 or higher) before proceeding. <br />\n  Please upgrade to ```docs.json``` before proceeding and delete the legacy ```mint.json``` file.\n</Info>\n\nFollow these steps to install and run Fumabase on your operating system:\n\n**Step 1**: Install Fumabase:\n\n<CodeGroup>\n\n  ```bash npm\n  npm i -g fumabase\n  ```\n\n```bash yarn\nyarn global add fumabase\n```\n\n</CodeGroup>\n\n**Step 2**: Navigate to the docs directory (where the `docs.json` file is located) and execute the following command:\n\n```bash\nmintlify dev\n```\n\nA local preview of your documentation will be available at `http://localhost:3000`.\n\n### Custom Ports\n\nBy default, Fumabase uses port 3000. You can customize the port Fumabase runs on by using the `--port` flag. To run Fumabase on port 3333, for instance, use this command:\n\n```bash\nmintlify dev --port 3333\n```\n\nIf you attempt to run Fumabase on a port that's already in use, it will use the next available port:\n\n```md\nPort 3000 is already in use. Trying 3001 instead.\n```\n\n## Fumabase Versions\n\nPlease note that each CLI release is associated with a specific version of Fumabase. If your local website doesn't align with the production version, please update the CLI:\n\n<CodeGroup>\n\n```bash npm\nnpm i -g fumabase@latest\n```\n\n```bash yarn\nyarn global upgrade fumabase\n```\n\n</CodeGroup>\n\n## Validating Links\n\nThe CLI can assist with validating reference links made in your documentation. To identify any broken links, use the following command:\n\n```bash\nmintlify broken-links\n```\n\n## Deployment\n\n<Tip>\n  Unlimited editors available under the [Pro\n  Plan](https://fumabase.com/pricing) and above.\n</Tip>\n\nIf the deployment is successful, you should see the following:\n\n<Frame>\n  <img src=\"/images/checks-passed.png\" style={{ borderRadius: '0.5rem' }} />\n</Frame>\n\n## Code Formatting\n\nWe suggest using extensions on your IDE to recognize and format MDX. If you're a VSCode user, consider the [MDX VSCode extension](https://marketplace.visualstudio.com/items?itemName=unifiedjs.vscode-mdx) for syntax highlighting, and [Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode) for code formatting.\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title='Error: Could not load the \"sharp\" module using the darwin-arm64 runtime'>\n\n    This may be due to an outdated version of node. Try the following:\n    1. Remove the currently-installed version of fumabase: `npm remove -g fumabase`\n    2. Upgrade to Node v19 or higher.\n    3. Reinstall fumabase: `npm install -g fumabase`\n  </Accordion>\n\n  <Accordion title=\"Issue: Encountering an unknown error\">\n  \n    Solution: Go to the root of your device and delete the \\~/.fumabase folder. Afterwards, run `fumabase dev` again.\n  </Accordion>\n</AccordionGroup>\n\nCurious about what changed in the CLI version? [Check out the CLI changelog.](https://www.npmjs.com/package/fumabase?activeTab=versions)\n",
        "relativePath": "development.mdx"
    },
    {
        "contents": "---\ntitle: 'Code Blocks'\ndescription: 'Display inline code and code blocks'\nicon: 'code'\n---\n\n## Basic\n\n### Inline Code\n\nTo denote a `word` or `phrase` as code, enclose it in backticks (`).\n\n```\nTo denote a `word` or `phrase` as code, enclose it in backticks (`).\n```\n\n### Code Block\n\nUse [fenced code blocks](https://www.markdownguide.org/extended-syntax/#fenced-code-blocks) by enclosing code in three backticks and follow the leading ticks with the programming language of your snippet to get syntax highlighting. Optionally, you can also write the name of your code after the programming language.\n\n```java HelloWorld.java\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n````md\n```java HelloWorld.java\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n````\n",
        "relativePath": "essentials/code.mdx"
    },
    {
        "contents": "---\ntitle: 'Images and Embeds'\ndescription: 'Add image, video, and other HTML elements'\nicon: 'image'\n---\n\n<img\n  style={{ borderRadius: '0.5rem' }}\n  src=\"https://fumabase-assets.b-cdn.net/bigbend.jpg\"\n/>\n\n## Image\n\n### Using Markdown\n\nThe [markdown syntax](https://www.markdownguide.org/basic-syntax/#images) lets you add images using the following code\n\n```md\n![title](/path/image.jpg)\n```\n\nNote that the image file size must be less than 5MB. Otherwise, we recommend hosting on a service like [Cloudinary](https://cloudinary.com/) or [S3](https://aws.amazon.com/s3/). You can then use that URL and embed.\n\n### Using Embeds\n\nTo get more customizability with images, you can also use [embeds](/writing-content/embed) to add images\n\n```html\n<img height=\"200\" src=\"/path/image.jpg\" />\n```\n\n## Embeds and HTML elements\n\n<iframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/4KzFe50RQkQ\"\n  title=\"YouTube video player\"\n  frameBorder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowFullScreen\n  style={{ width: '100%', borderRadius: '0.5rem' }}\n></iframe>\n\n<br />\n\n<Tip>\n\nFumabase supports [HTML tags in Markdown](https://www.markdownguide.org/basic-syntax/#html). This is helpful if you prefer HTML tags to Markdown syntax, and lets you create documentation with infinite flexibility.\n\n</Tip>\n\n### iFrames\n\nLoads another HTML page within the document. Most commonly used for embedding videos.\n\n```html\n<iframe src=\"https://www.youtube.com/embed/4KzFe50RQkQ\"> </iframe>\n```\n",
        "relativePath": "essentials/images.mdx"
    },
    {
        "contents": "---\ntitle: 'Markdown Syntax'\ndescription: 'Text, title, and styling in standard markdown'\nicon: 'text-size'\n---\n\n## Titles\n\nBest used for section headers.\n\n```md\n## Titles\n```\n\n### Subtitles\n\nBest use to subsection headers.\n\n```md\n### Subtitles\n```\n\n<Tip>\n\nEach **title** and **subtitle** creates an anchor and also shows up on the table of contents on the right.\n\n</Tip>\n\n## Text Formatting\n\nWe support most markdown formatting. Simply add `**`, `_`, or `~` around text to format it.\n\n| Style         | How to write it   | Result          |\n| ------------- | ----------------- | --------------- |\n| Bold          | `**bold**`        | **bold**        |\n| Italic        | `_italic_`        | _italic_        |\n| Strikethrough | `~strikethrough~` | ~strikethrough~ |\n\nYou can combine these. For example, write `**_bold and italic_**` to get **_bold and italic_** text.\n\nYou need to use HTML to write superscript and subscript text. That is, add `<sup>` or `<sub>` around your text.\n\n| Text Size   | How to write it          | Result                 |\n| ----------- | ------------------------ | ---------------------- |\n| Superscript | `<sup>superscript</sup>` | <sup>superscript</sup> |\n| Subscript   | `<sub>subscript</sub>`   | <sub>subscript</sub>   |\n\n## Linking to Pages\n\nYou can add a link by wrapping text in `[]()`. You would write `[link to google](https://google.com)` to [link to google](https://google.com).\n\nLinks to pages in your docs need to be root-relative. Basically, you should include the entire folder path. For example, `[link to text](/writing-content/text)` links to the page \"Text\" in our components section.\n\nRelative links like `[link to text](../text)` will open slower because we cannot optimize them as easily.\n\n## Blockquotes\n\n### Singleline\n\nTo create a blockquote, add a `>` in front of a paragraph.\n\n> Dorothy followed her through many of the beautiful rooms in her castle.\n\n```md\n> Dorothy followed her through many of the beautiful rooms in her castle.\n```\n\n### Multiline\n\n> Dorothy followed her through many of the beautiful rooms in her castle.\n>\n> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n\n```md\n> Dorothy followed her through many of the beautiful rooms in her castle.\n>\n> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n```\n\n### LaTeX\n\nFumabase supports [LaTeX](https://www.latex-project.org) through the Latex component.\n\n<Latex>8 x (vk x H1 - H2) = (0,1)</Latex>\n\n```md\n<Latex>8 x (vk x H1 - H2) = (0,1)</Latex>\n```\n",
        "relativePath": "essentials/markdown.mdx"
    },
    {
        "contents": "---\ntitle: 'Navigation'\ndescription: 'The navigation field in docs.json defines the pages that go in the navigation menu'\nicon: 'map'\n---\n\nThe navigation menu is the list of links on every website.\n\nYou will likely update `docs.json` every time you add a new page. Pages do not show up automatically.\n\n## Navigation syntax\n\nOur navigation syntax is recursive which means you can make nested navigation groups. You don't need to include `.mdx` in page names.\n\n<CodeGroup>\n\n```json Regular Navigation\n\"navigation\": {\n  \"tabs\": [\n    {\n      \"tab\": \"Docs\",\n      \"groups\": [\n        {\n          \"group\": \"Getting Started\",\n          \"pages\": [\"quickstart\"]\n        }\n      ]\n    }\n  ]\n}\n```\n\n```json Nested Navigation\n\"navigation\": {\n  \"tabs\": [\n    {\n      \"tab\": \"Docs\",\n      \"groups\": [\n        {\n          \"group\": \"Getting Started\",\n          \"pages\": [\n            \"quickstart\",\n            {\n              \"group\": \"Nested Reference Pages\",\n              \"pages\": [\"nested-reference-page\"]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n</CodeGroup>\n\n## Folders\n\nSimply put your MDX files in folders and update the paths in `docs.json`.\n\nFor example, to have a page at `https://yoursite.com/your-folder/your-page` you would make a folder called `your-folder` containing an MDX file called `your-page.mdx`.\n\n<Warning>\n\nYou cannot use `api` for the name of a folder unless you nest it inside another folder. Fumabase uses Next.js which reserves the top-level `api` folder for internal server calls. A folder name such as `api-reference` would be accepted.\n\n</Warning>\n\n```json Navigation With Folder\n\"navigation\": {\n  \"tabs\": [\n    {\n      \"tab\": \"Docs\",\n      \"groups\": [\n        {\n          \"group\": \"Group Name\",\n          \"pages\": [\"your-folder/your-page\"]\n        }\n      ]\n    }\n  ]\n}\n```\n\n## Hidden Pages\n\nMDX files not included in `docs.json` will not show up in the sidebar but are accessible through the search bar and by linking directly to them.\n",
        "relativePath": "essentials/navigation.mdx"
    },
    {
        "contents": "---\ntitle: Reusable Snippets\ndescription: Reusable, custom snippets to keep content in sync\nicon: 'recycle'\n---\n\nimport SnippetIntro from '/snippets/snippet-intro.mdx';\n\n<SnippetIntro />\n\n## Creating a custom snippet\n\n**Pre-condition**: You must create your snippet file in the `snippets` directory.\n\n<Note>\n  Any page in the `snippets` directory will be treated as a snippet and will not\n  be rendered into a standalone page. If you want to create a standalone page\n  from the snippet, import the snippet into another file and call it as a\n  component.\n</Note>\n\n### Default export\n\n1. Add content to your snippet file that you want to re-use across multiple\n   locations. Optionally, you can add variables that can be filled in via props\n   when you import the snippet.\n\n```mdx snippets/my-snippet.mdx\nHello world! This is my content I want to reuse across pages. My keyword of the\nday is {word}.\n```\n\n<Warning>\n  The content that you want to reuse must be inside the `snippets` directory in\n  order for the import to work.\n</Warning>\n\n2. Import the snippet into your destination file.\n\n```mdx destination-file.mdx\n---\ntitle: My title\ndescription: My Description\n---\n\nimport MySnippet from '/snippets/path/to/my-snippet.mdx';\n\n## Header\n\nLorem impsum dolor sit amet.\n\n<MySnippet word=\"bananas\" />\n```\n\n### Reusable variables\n\n1. Export a variable from your snippet file:\n\n```mdx snippets/path/to/custom-variables.mdx\nexport const myName = 'my name';\n\nexport const myObject = { fruit: 'strawberries' };\n```\n\n2. Import the snippet from your destination file and use the variable:\n\n```mdx destination-file.mdx\n---\ntitle: My title\ndescription: My Description\n---\n\nimport { myName, myObject } from '/snippets/path/to/custom-variables.mdx';\n\nHello, my name is {myName} and I like {myObject.fruit}.\n```\n\n### Reusable components\n\n1. Inside your snippet file, create a component that takes in props by exporting\n   your component in the form of an arrow function.\n\n```mdx snippets/custom-component.mdx\nexport const MyComponent = ({ title }) => (\n  <div>\n    <h1>{title}</h1>\n    <p>... snippet content ...</p>\n  </div>\n);\n```\n\n<Warning>\n  MDX does not compile inside the body of an arrow function. Stick to HTML\n  syntax when you can or use a default export if you need to use MDX.\n</Warning>\n\n2. Import the snippet into your destination file and pass in the props\n\n```mdx destination-file.mdx\n---\ntitle: My title\ndescription: My Description\n---\n\nimport { MyComponent } from '/snippets/custom-component.mdx';\n\nLorem ipsum dolor sit amet.\n\n<MyComponent title={'Custom title'} />\n```\n",
        "relativePath": "essentials/reusable-snippets.mdx"
    },
    {
        "contents": "---\ntitle: 'Global Settings'\ndescription: 'Fumabase gives you complete control over the look and feel of your documentation using the docs.json file'\nicon: 'gear'\n---\n\nEvery Fumabase site needs a `docs.json` file with the core configuration settings. Learn more about the [properties](#properties) below.\n\n## Properties\n\n<ResponseField name=\"name\" type=\"string\" required>\nName of your project. Used for the global title.\n\nExample: `fumabase`\n\n</ResponseField>\n\n<ResponseField name=\"navigation\" type=\"Navigation[]\" required>\n  An array of groups with all the pages within that group\n  <Expandable title=\"Navigation\">\n    <ResponseField name=\"group\" type=\"string\">\n    The name of the group.\n\n    Example: `Settings`\n\n    </ResponseField>\n    <ResponseField name=\"pages\" type=\"string[]\">\n    The relative paths to the markdown files that will serve as pages.\n\n    Example: `[\"customization\", \"page\"]`\n\n    </ResponseField>\n\n  </Expandable>\n</ResponseField>\n\n<ResponseField name=\"logo\" type=\"string or object\">\n  Path to logo image or object with path to \"light\" and \"dark\" mode logo images\n  <Expandable title=\"Logo\">\n    <ResponseField name=\"light\" type=\"string\">\n      Path to the logo in light mode\n    </ResponseField>\n    <ResponseField name=\"dark\" type=\"string\">\n      Path to the logo in dark mode\n    </ResponseField>\n    <ResponseField name=\"href\" type=\"string\" default=\"/\">\n      Where clicking on the logo links you to\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseField name=\"favicon\" type=\"string\">\n  Path to the favicon image\n</ResponseField>\n\n<ResponseField name=\"colors\" type=\"Colors\">\n  Hex color codes for your global theme\n  <Expandable title=\"Colors\">\n    <ResponseField name=\"primary\" type=\"string\" required>\n      The primary color. Used for most often for highlighted content, section\n      headers, accents, in light mode\n    </ResponseField>\n    <ResponseField name=\"light\" type=\"string\">\n      The primary color for dark mode. Used for most often for highlighted\n      content, section headers, accents, in dark mode\n    </ResponseField>\n    <ResponseField name=\"dark\" type=\"string\">\n      The primary color for important buttons\n    </ResponseField>\n    <ResponseField name=\"background\" type=\"object\">\n      The color of the background in both light and dark mode\n      <Expandable title=\"Object\">\n        <ResponseField name=\"light\" type=\"string\" required>\n          The hex color code of the background in light mode\n        </ResponseField>\n        <ResponseField name=\"dark\" type=\"string\" required>\n          The hex color code of the background in dark mode\n        </ResponseField>\n      </Expandable>\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseField name=\"topbarLinks\" type=\"TopbarLink[]\">\n  Array of `name`s and `url`s of links you want to include in the topbar\n  <Expandable title=\"TopbarLink\">\n    <ResponseField name=\"name\" type=\"string\">\n    The name of the button.\n\n    Example: `Contact us`\n    </ResponseField>\n    <ResponseField name=\"url\" type=\"string\">\n    The url once you click on the button. Example: `https://fumabase.com/docs`\n    </ResponseField>\n\n  </Expandable>\n</ResponseField>\n\n<ResponseField name=\"topbarCtaButton\" type=\"Call to Action\">\n  <Expandable title=\"Topbar Call to Action\">\n    <ResponseField name=\"type\" type={'\"link\" or \"github\"'} default=\"link\">\n    Link shows a button. GitHub shows the repo information at the url provided including the number of GitHub stars.\n    </ResponseField>\n    <ResponseField name=\"url\" type=\"string\">\n    If `link`: What the button links to.\n    \n    If `github`: Link to the repository to load GitHub information from.\n    </ResponseField>\n    <ResponseField name=\"name\" type=\"string\">\n    Text inside the button. Only required if `type` is a `link`.\n    </ResponseField>\n\n  </Expandable>\n</ResponseField>\n\n<ResponseField name=\"versions\" type=\"string[]\">\n  Array of version names. Only use this if you want to show different versions\n  of docs with a dropdown in the navigation bar.\n</ResponseField>\n\n<ResponseField name=\"anchors\" type=\"Anchor[]\">\n  An array of the anchors, includes the `icon`, `color`, and `url`.\n  <Expandable title=\"Anchor\">\n    <ResponseField name=\"icon\" type=\"string\">\n    The [Font Awesome](https://fontawesome.com/search?q=heart) icon used to feature the anchor.\n\n    Example: `comments`\n    </ResponseField>\n    <ResponseField name=\"name\" type=\"string\">\n    The name of the anchor label.\n\n    Example: `Community`\n    </ResponseField>\n    <ResponseField name=\"url\" type=\"string\">\n      The start of the URL that marks what pages go in the anchor. Generally, this is the name of the folder you put your pages in.\n    </ResponseField>\n    <ResponseField name=\"color\" type=\"string\">\n      The hex color of the anchor icon background. Can also be a gradient if you pass an object with the properties `from` and `to` that are each a hex color.\n    </ResponseField>\n    <ResponseField name=\"version\" type=\"string\">\n      Used if you want to hide an anchor until the correct docs version is selected.\n    </ResponseField>\n    <ResponseField name=\"isDefaultHidden\" type=\"boolean\" default=\"false\">\n      Pass `true` if you want to hide the anchor until you directly link someone to docs inside it.\n    </ResponseField>\n    <ResponseField name=\"iconType\" default=\"duotone\" type=\"string\">\n      One of: \"brands\", \"duotone\", \"light\", \"sharp-solid\", \"solid\", or \"thin\"\n    </ResponseField>\n\n  </Expandable>\n</ResponseField>\n\n<ResponseField name=\"topAnchor\" type=\"Object\">\n  Override the default configurations for the top-most anchor.\n  <Expandable title=\"Object\">\n    <ResponseField name=\"name\" default=\"Documentation\" type=\"string\">\n      The name of the top-most anchor\n    </ResponseField>\n    <ResponseField name=\"icon\" default=\"book-open\" type=\"string\">\n      Font Awesome icon.\n    </ResponseField>\n    <ResponseField name=\"iconType\" default=\"duotone\" type=\"string\">\n      One of: \"brands\", \"duotone\", \"light\", \"sharp-solid\", \"solid\", or \"thin\"\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseField name=\"tabs\" type=\"Tabs[]\">\n  An array of navigational tabs.\n  <Expandable title=\"Tabs\">\n    <ResponseField name=\"name\" type=\"string\">\n      The name of the tab label.\n    </ResponseField>\n    <ResponseField name=\"url\" type=\"string\">\n      The start of the URL that marks what pages go in the tab. Generally, this\n      is the name of the folder you put your pages in.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseField name=\"api\" type=\"API\">\n  Configuration for API settings. Learn more about API pages at [API Components](/api-playground/demo).\n  <Expandable title=\"API\">\n    <ResponseField name=\"baseUrl\" type=\"string\">\n      The base url for all API endpoints. If `baseUrl` is an array, it will enable for multiple base url\n      options that the user can toggle.\n    </ResponseField>\n\n    <ResponseField name=\"auth\" type=\"Auth\">\n      <Expandable title=\"Auth\">\n        <ResponseField name=\"method\" type='\"bearer\" | \"basic\" | \"key\"'>\n          The authentication strategy used for all API endpoints.\n        </ResponseField>\n        <ResponseField name=\"name\" type=\"string\">\n        The name of the authentication parameter used in the API playground.\n\n        If method is `basic`, the format should be `[usernameName]:[passwordName]`\n        </ResponseField>\n        <ResponseField name=\"inputPrefix\" type=\"string\">\n        The default value that's designed to be a prefix for the authentication input field.\n\n        E.g. If an `inputPrefix` of `AuthKey` would inherit the default input result of the authentication field as `AuthKey`.\n        </ResponseField>\n      </Expandable>\n    </ResponseField>\n\n    <ResponseField name=\"playground\" type=\"Playground\">\n      Configurations for the API playground\n\n      <Expandable title=\"Playground\">\n        <ResponseField name=\"mode\" default=\"show\" type='\"show\" | \"simple\" | \"hide\"'>\n          Whether the playground is showing, hidden, or only displaying the endpoint with no added user interactivity `simple`\n\n          Learn more at the [playground guides](/api-playground/demo)\n        </ResponseField>\n      </Expandable>\n    </ResponseField>\n\n    <ResponseField name=\"maintainOrder\" type=\"boolean\">\n      Enabling this flag ensures that key ordering in OpenAPI pages matches the key ordering defined in the OpenAPI file.\n\n      <Warning>This behavior will soon be enabled by default, at which point this field will be deprecated.</Warning>\n    </ResponseField>\n\n  </Expandable>\n</ResponseField>\n\n<ResponseField name=\"openapi\" type=\"string | string[]\">\n  A string or an array of strings of URL(s) or relative path(s) pointing to your\n  OpenAPI file.\n  \n  Examples:\n  <CodeGroup>\n    ```json Absolute\n    \"openapi\": \"https://example.com/openapi.json\"\n    ```\n    ```json Relative\n    \"openapi\": \"/openapi.json\"\n    ```\n    ```json Multiple\n    \"openapi\": [\"https://example.com/openapi1.json\", \"/openapi2.json\", \"/openapi3.json\"]\n    ```\n  </CodeGroup>\n\n</ResponseField>\n\n<ResponseField name=\"footerSocials\" type=\"FooterSocials\">\n  An object of social media accounts where the key:property pair represents the social media platform and the account url.\n  \n  Example: \n  ```json\n  {\n    \"x\": \"https://x.com/fumabase\",\n    \"website\": \"https://fumabase.com\"\n  }\n  ```\n  <Expandable title=\"FooterSocials\">\n    <ResponseField name=\"[key]\" type=\"string\">\n    One of the following values `website`, `facebook`, `x`, `discord`, `slack`, `github`, `linkedin`, `instagram`, `hacker-news`\n    \n    Example: `x`\n    </ResponseField>\n    <ResponseField name=\"property\" type=\"string\">\n    The URL to the social platform.\n    \n    Example: `https://x.com/fumabase`\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseField name=\"feedback\" type=\"Feedback\">\n  Configurations to enable feedback buttons\n\n  <Expandable title=\"Feedback\">\n    <ResponseField name=\"suggestEdit\" type=\"boolean\" default=\"false\">\n    Enables a button to allow users to suggest edits via pull requests\n    </ResponseField>\n    <ResponseField name=\"raiseIssue\" type=\"boolean\" default=\"false\">\n    Enables a button to allow users to raise an issue about the documentation\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseField name=\"modeToggle\" type=\"ModeToggle\">\n  Customize the dark mode toggle.\n  <Expandable title=\"ModeToggle\">\n    <ResponseField name=\"default\" type={'\"light\" or \"dark\"'}>\n      Set if you always want to show light or dark mode for new users. When not\n      set, we default to the same mode as the user's operating system.\n    </ResponseField>\n    <ResponseField name=\"isHidden\" type=\"boolean\" default=\"false\">\n      Set to true to hide the dark/light mode toggle. You can combine `isHidden` with `default` to force your docs to only use light or dark mode. For example:\n      \n      <CodeGroup>\n      ```json Only Dark Mode\n      \"modeToggle\": {\n        \"default\": \"dark\",\n        \"isHidden\": true\n      }\n      ```\n\n      ```json Only Light Mode\n      \"modeToggle\": {\n        \"default\": \"light\",\n        \"isHidden\": true\n      }\n      ```\n      </CodeGroup>\n\n    </ResponseField>\n\n  </Expandable>\n</ResponseField>\n\n<ResponseField name=\"backgroundImage\" type=\"string\">\n  A background image to be displayed behind every page. See example with\n  [Infisical](https://infisical.com/docs) and [FRPC](https://frpc.io).\n</ResponseField>\n",
        "relativePath": "essentials/settings.mdx"
    },
    {
        "contents": "---\ntitle: Introduction\ndescription: \"Welcome to the home of your new documentation\"\n---\n\n<img\n  className=\"block dark:hidden\"\n  src=\"/images/hero-light.png\"\n  alt=\"Hero Light\"\n/>\n<img\n  className=\"hidden dark:block\"\n  src=\"/images/hero-dark.png\"\n  alt=\"Hero Dark\"\n/>\n\n## Setting up\n\nThe first step to world-class documentation is setting up your editing environments.\n\n<CardGroup cols={2}>\n  <Card\n    title=\"Edit Your Docs\"\n    icon=\"pen-to-square\"\n    href=\"https://fumabase.com/docs/quickstart\"\n  >\n    Get your docs set up locally for easy development\n  </Card>\n  <Card\n    title=\"Preview Changes\"\n    icon=\"image\"\n    href=\"https://fumabase.com/docs/development\"\n  >\n    Preview your changes before you push to make sure they're perfect\n  </Card>\n</CardGroup>\n\n## Make it yours\n\nUpdate your docs to your brand and add valuable content for the best user conversion.\n\n<CardGroup cols={2}>\n  <Card\n    title=\"Customize Style\"\n    icon=\"palette\"\n    href=\"https://fumabase.com/docs/settings/global\"\n  >\n    Customize your docs to your company's colors and brands\n  </Card>\n  <Card\n    title=\"Reference APIs\"\n    icon=\"code\"\n    href=\"https://fumabase.com/docs/api-playground/openapi\"\n  >\n    Automatically generate endpoints from an OpenAPI spec\n  </Card>\n  <Card\n    title=\"Add Components\"\n    icon=\"screwdriver-wrench\"\n    href=\"https://fumabase.com/docs/content/components/accordions\"\n  >\n    Build interactive features and designs to guide your users\n  </Card>\n  <Card\n    title=\"Get Inspiration\"\n    icon=\"stars\"\n    href=\"https://fumabase.com/customers\"\n  >\n    Check out our showcase of our favorite documentation\n  </Card>\n</CardGroup>\n",
        "relativePath": "index.mdx"
    },
    {
        "contents": "---\ntitle: 'Quickstart'\ndescription: 'Start building awesome documentation in under 5 minutes'\n---\n\n## Setup your development\n\nLearn how to update your docs locally and deploy them to the public.\n\n### Edit and preview\n\n<AccordionGroup>\n  <Accordion icon=\"github\" title=\"Clone your docs locally\">\n    During the onboarding process, we created a repository on your Github with\n    your docs content. You can find this repository on our\n    [dashboard](https://dashboard.fumabase.com). To clone the repository\n    locally, follow these\n    [instructions](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository)\n    in your terminal.\n  </Accordion>\n  <Accordion icon=\"rectangle-terminal\" title=\"Preview changes\">\n    Previewing helps you make sure your changes look as intended. We built a\n    command line interface to render these changes locally. \n    1. Install the\n    [Fumabase CLI](https://www.npmjs.com/package/fumabase) to preview the\n    documentation changes locally with this command: ``` npm i -g fumabase ```\n    2. Run the following command at the root of your documentation (where\n    `docs.json` is): ``` fumabase dev ```\n    <Note>\n      If you’re currently using the legacy ```mint.json``` configuration file, please update the Fumabase CLI:\n\n\n      ```npm i -g fumabase@latest```\n      And run the new upgrade command in your docs repository:\n\n      ```fumabase upgrade```\n      You should now be using the new ```docs.json``` configuration file. Feel free to delete the ```mint.json``` file from your repository.\n    </Note>\n  </Accordion>\n</AccordionGroup>\n\n### Deploy your changes\n\n<AccordionGroup>\n\n<Accordion icon=\"message-bot\" title=\"Install our Github app\">\n  Our Github app automatically deploys your changes to your docs site, so you\n  don't need to manage deployments yourself. You can find the link to install on\n  your [dashboard](https://dashboard.fumabase.com). Once the bot has been\n  successfully installed, there should be a check mark next to the commit hash\n  of the repo.\n</Accordion>\n<Accordion icon=\"rocket\" title=\"Push your changes\">\n  [Commit and push your changes to\n  Git](https://docs.github.com/en/get-started/using-git/pushing-commits-to-a-remote-repository#about-git-push)\n  for your changes to update in your docs site. If you push and don't see that\n  the Github app successfully deployed your changes, you can also manually\n  update your docs through our [dashboard](https://dashboard.fumabase.com).\n</Accordion>\n\n</AccordionGroup>\n\n## Update your docs\n\nAdd content directly in your files with MDX syntax and React components. You can use any of our components, or even build your own.\n\n<CardGroup>\n\n<Card title=\"Add Content With MDX\" icon=\"file\" href=\"/essentials/markdown\">\n  Add content to your docs with MDX syntax.\n</Card>\n\n<Card\n  title=\"Add Code Blocks\"\n  icon=\"square-code\"\n  href=\"/essentials/code\"\n>\n  Add code directly to your docs with syntax highlighting.\n</Card>\n\n<Card\n  title=\"Add Images\"\n  icon=\"image\"\n  href=\"/essentials/images\"\n>\n  Add images to your docs to make them more engaging.\n</Card>\n\n<Card\n  title=\"Add Custom Components\"\n  icon=\"puzzle-piece\"\n  href=\"/essentials/reusable-snippets\"\n>\n  Add templates to your docs to make them more reusable.\n</Card>\n\n</CardGroup>\n",
        "relativePath": "quickstart.mdx"
    },
    {
        "contents": "# Fumabase Starter Kit\n\nClick on `Use this template` to copy the Fumabase starter kit. The starter kit contains examples including\n\n- Guide pages\n- Navigation\n- Customizations\n- API Reference pages\n- Use of popular components\n\n### Development\n\nInstall the [Fumabase CLI](https://www.npmjs.com/package/fumabase) to preview the documentation changes locally. To install, use the following command\n\n```\nnpm i -g fumabase\n```\n\nRun the following command at the root of your documentation (where docs.json is)\n\n```\nmintlify dev\n```\n\n### Publishing Changes\n\nInstall our Github App to auto propagate changes from your repo to your deployment. Changes will be deployed to production automatically after pushing to the default branch. Find the link to install on your dashboard. \n\n#### Troubleshooting\n\n- Fumabase dev isn't running - Run `fumabase install` it'll re-install dependencies.\n- Page loads as a 404 - Make sure you are running in a folder with `docs.json`\n",
        "relativePath": "README.md"
    },
    {
        "contents": "One of the core principles of software development is DRY (Don't Repeat\nYourself). This is a principle that apply to documentation as\nwell. If you find yourself repeating the same content in multiple places, you\nshould consider creating a custom snippet to keep your content in sync.\n",
        "relativePath": "snippets/snippet-intro.mdx"
    }
]
