[
  {
    "contents": "---\ntitle: 'Code Blocks'\ndescription: 'Display inline code and code blocks'\nicon: 'code'\n---\n\n## Basic\n\n### Inline Code\n\nTo denote a `word` or `phrase` as code, enclose it in backticks (`).\n\n```\nTo denote a `word` or `phrase` as code, enclose it in backticks (`).\n```\n\n### Code Block\n\nUse [fenced code blocks](https://www.markdownguide.org/extended-syntax/#fenced-code-blocks) by enclosing code in three backticks and follow the leading ticks with the programming language of your snippet to get syntax highlighting. Optionally, you can also write the name of your code after the programming language.\n\n```java HelloWorld.java\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n````md\n```java HelloWorld.java\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n````\n",
    "relativePath": "essentials/code.mdx"
  },
  {
    "contents": "---\ntitle: 'Images and Embeds'\ndescription: 'Add image, video, and other HTML elements'\nicon: 'image'\n---\n\n<img\n  style={{ borderRadius: '0.5rem' }}\n  src=\"https://fumabase-assets.b-cdn.net/bigbend.jpg\"\n/>\n\n## Image\n\n### Using Markdown\n\nThe [markdown syntax](https://www.markdownguide.org/basic-syntax/#images) lets you add images using the following code\n\n```md\n![title](/path/image.jpg)\n```\n\nNote that the image file size must be less than 5MB. Otherwise, we recommend hosting on a service like [Cloudinary](https://cloudinary.com/) or [S3](https://aws.amazon.com/s3/). You can then use that URL and embed.\n\n### Using Embeds\n\nTo get more customizability with images, you can also use [embeds](/writing-content/embed) to add images\n\n```html\n<img height=\"200\" src=\"/path/image.jpg\" />\n```\n\n## Embeds and HTML elements\n\n<iframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/4KzFe50RQkQ\"\n  title=\"YouTube video player\"\n  frameBorder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowFullScreen\n  style={{ width: '100%', borderRadius: '0.5rem' }}\n></iframe>\n\n<br />\n\n<Tip>\n\nFumabase supports [HTML tags in Markdown](https://www.markdownguide.org/basic-syntax/#html). This is helpful if you prefer HTML tags to Markdown syntax, and lets you create documentation with infinite flexibility.\n\n</Tip>\n\n### iFrames\n\nLoads another HTML page within the document. Most commonly used for embedding videos.\n\n```html\n<iframe src=\"https://www.youtube.com/embed/4KzFe50RQkQ\"> </iframe>\n```\n",
    "relativePath": "essentials/images.mdx"
  },
  {
    "contents": "---\ntitle: 'Markdown Syntax'\ndescription: 'Text, title, and styling in standard markdown'\nicon: 'text-size'\n---\n\n## Titles\n\nBest used for section headers.\n\n```md\n## Titles\n```\n\n### Subtitles\n\nBest use to subsection headers.\n\n```md\n### Subtitles\n```\n\n<Tip>\n\nEach **title** and **subtitle** creates an anchor and also shows up on the table of contents on the right.\n\n</Tip>\n\n## Text Formatting\n\nWe support most markdown formatting. Simply add `**`, `_`, or `~` around text to format it.\n\n| Style         | How to write it   | Result          |\n| ------------- | ----------------- | --------------- |\n| Bold          | `**bold**`        | **bold**        |\n| Italic        | `_italic_`        | _italic_        |\n| Strikethrough | `~strikethrough~` | ~strikethrough~ |\n\nYou can combine these. For example, write `**_bold and italic_**` to get **_bold and italic_** text.\n\nYou need to use HTML to write superscript and subscript text. That is, add `<sup>` or `<sub>` around your text.\n\n| Text Size   | How to write it          | Result                 |\n| ----------- | ------------------------ | ---------------------- |\n| Superscript | `<sup>superscript</sup>` | <sup>superscript</sup> |\n| Subscript   | `<sub>subscript</sub>`   | <sub>subscript</sub>   |\n\n## Linking to Pages\n\nYou can add a link by wrapping text in `[]()`. You would write `[link to google](https://google.com)` to [link to google](https://google.com).\n\nLinks to pages in your docs need to be root-relative. Basically, you should include the entire folder path. For example, `[link to text](/writing-content/text)` links to the page \"Text\" in our components section.\n\nRelative links like `[link to text](../text)` will open slower because we cannot optimize them as easily.\n\n## Blockquotes\n\n### Singleline\n\nTo create a blockquote, add a `>` in front of a paragraph.\n\n> Dorothy followed her through many of the beautiful rooms in her castle.\n\n```md\n> Dorothy followed her through many of the beautiful rooms in her castle.\n```\n\n### Multiline\n\n> Dorothy followed her through many of the beautiful rooms in her castle.\n>\n> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n\n```md\n> Dorothy followed her through many of the beautiful rooms in her castle.\n>\n> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n```\n\n### LaTeX\n\nFumabase supports [LaTeX](https://www.latex-project.org) through the Latex component.\n\n<Latex>8 x (vk x H1 - H2) = (0,1)</Latex>\n\n```md\n<Latex>8 x (vk x H1 - H2) = (0,1)</Latex>\n```\n",
    "relativePath": "essentials/markdown.mdx"
  },
  {
    "contents": "---\ntitle: 'Navigation'\ndescription: 'The navigation field in docs.json defines the pages that go in the navigation menu'\nicon: 'map'\n---\n\nThe navigation menu is the list of links on every website.\n\nYou will likely update `docs.json` every time you add a new page. Pages do not show up automatically.\n\n## Navigation syntax\n\nOur navigation syntax is recursive which means you can make nested navigation groups. You don't need to include `.mdx` in page names.\n\n<CodeGroup>\n\n```json Regular Navigation\n\"navigation\": {\n  \"tabs\": [\n    {\n      \"tab\": \"Docs\",\n      \"groups\": [\n        {\n          \"group\": \"Getting Started\",\n          \"pages\": [\"quickstart\"]\n        }\n      ]\n    }\n  ]\n}\n```\n\n```json Nested Navigation\n\"navigation\": {\n  \"tabs\": [\n    {\n      \"tab\": \"Docs\",\n      \"groups\": [\n        {\n          \"group\": \"Getting Started\",\n          \"pages\": [\n            \"quickstart\",\n            {\n              \"group\": \"Nested Reference Pages\",\n              \"pages\": [\"nested-reference-page\"]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n</CodeGroup>\n\n## Folders\n\nSimply put your MDX files in folders and update the paths in `docs.json`.\n\nFor example, to have a page at `https://yoursite.com/your-folder/your-page` you would make a folder called `your-folder` containing an MDX file called `your-page.mdx`.\n\n<Warning>\n\nYou cannot use `api` for the name of a folder unless you nest it inside another folder. Fumabase uses Next.js which reserves the top-level `api` folder for internal server calls. A folder name such as `api-reference` would be accepted.\n\n</Warning>\n\n```json Navigation With Folder\n\"navigation\": {\n  \"tabs\": [\n    {\n      \"tab\": \"Docs\",\n      \"groups\": [\n        {\n          \"group\": \"Group Name\",\n          \"pages\": [\"your-folder/your-page\"]\n        }\n      ]\n    }\n  ]\n}\n```\n\n## Hidden Pages\n\nMDX files not included in `docs.json` will not show up in the sidebar but are accessible through the search bar and by linking directly to them.\n",
    "relativePath": "essentials/navigation.mdx"
  },
  {
    "contents": "# Fumabase Starter Kit\n\n### Development\n\n## 1. Install the Fumabase CLI\n\nTo preview your documentation changes locally, first install the [Fumabase CLI](https://www.npmjs.com/package/fumabase). Use the following command:\n\n```\nnpm i -g fumabase\n```\n\n## 2. Start the Local Development Server\n\nAt the root of your documentation project (where `fumabase.json` is located), start the development server with:\n\n```\nfumabase dev\n```\n\n### Publishing Changes\n\n## 3. Set Up Automatic Deployments\n\nInstall our GitHub App to enable automated deployments from your repository. After pushing changes to your default branch, your documentation will be deployed to production automatically. You can find the installation link on your dashboard.\n",
    "relativePath": "README.md"
  },
  {
    "contents": "---\ntitle: 'Writing Accessible Documentation'\ndescription: 'Create documentation that works for everyone by following accessibility principles and inclusive design practices.'\n---\n\n# Writing Accessible Documentation\n\nAccessible documentation isn't just about compliance—it creates better experiences for all users by prioritizing clarity, structure, and multiple ways to consume information.\n\n## Clear Language and Structure\n\nAccessible writing starts with clear, direct language that reduces cognitive load for all readers.\n\n### Write for Clarity\n\nUse simple, direct language that communicates efficiently:\n\n<CodeGroup>\n```markdown ❌ Complex Language\nSubsequently, in order to implement the aforementioned functionality, \nit is necessary to instantiate the configuration object with the \nappropriate parameters as delineated in the following example.\n```\n\n```markdown ✅ Clear Language\nNext, create a configuration object with these settings:\n```\n</CodeGroup>\n\n### Meaningful Headings\n\nWrite headings that describe content accurately and help users navigate efficiently:\n\n<Tabs>\n<Tab title=\"Poor Headings\">\n```markdown\n# Introduction\n## Getting Started  \n## More Information\n## Advanced Stuff\n```\n</Tab>\n\n<Tab title=\"Descriptive Headings\">\n```markdown\n# User Authentication Setup\n## Installing the Authentication SDK\n## Configuring Your First Login Flow  \n## Handling Authentication Errors\n## Multi-Factor Authentication Options\n```\n</Tab>\n</Tabs>\n\n<Tip>\n**Screen Reader Test:** Read only your headings aloud. Can someone understand your document structure and find what they need?\n</Tip>\n\n## Alternative Text and Media\n\nProvide meaningful descriptions for all visual content so information isn't lost for users who can't see images.\n\n### Effective Alt Text\n\nWrite alt text that conveys the same information the image provides:\n\n<Frame>\n<img src=\"/images/api-response-structure.png\" alt=\"JSON response object showing nested user data with id, email, profile object containing name and avatar_url fields, and timestamps array\" />\n</Frame>\n\n<Steps>\n<Step title=\"Describe the purpose, not appearance\">\n    Focus on what information the image conveys, not how it looks.\n\n    ```markdown\n    ❌ \"Screenshot of a dashboard\"\n    ✅ \"Dashboard showing 3 active integrations, 1,247 API calls today, \n        and 99.8% uptime status\"\n    ```\n</Step>\n\n<Step title=\"Include relevant text content\">\n    If the image contains important text, include it in the alt text.\n\n    ```markdown\n    ❌ \"Error message dialog box\"\n    ✅ \"Error dialog stating 'Invalid API key. Please check your \n        configuration and try again.' with a retry button\"\n    ```\n</Step>\n\n<Step title=\"Provide context for complex visuals\">\n    For diagrams and charts, describe the key relationships and data.\n\n    <Frame caption=\"API request flow showing authentication, validation, and response steps\">\n    <img src=\"/images/api-flow-diagram.png\" alt=\"Flow diagram showing: 1) Client sends request with API key, 2) Server validates key against database, 3) If valid, processes request and returns data, 4) If invalid, returns 401 error with helpful message\" />\n    </Frame>\n</Step>\n</Steps>\n\n### Video and Interactive Content\n\nProvide text alternatives for multimedia content:\n\n<AccordionGroup>\n<Accordion title=\"Video transcripts\">\nInclude complete transcripts for instructional videos:\n\n```markdown\n## Video: Setting Up Webhooks (3:42)\n\n[Full transcript available]\n\n**0:00 - 0:15** Introduction: \"In this video, we'll configure webhooks \nto receive real-time notifications when events occur in your application.\"\n\n**0:16 - 0:45** Navigate to dashboard: \"First, log into your dashboard \nand click the 'Webhooks' tab in the sidebar. You'll see a list of \nexisting webhooks or an empty state if this is your first time.\"\n\n**0:46 - 1:20** Creating a webhook: \"Click 'Add Webhook' and enter your \nendpoint URL. This should be a publicly accessible HTTPS URL that can \nreceive POST requests...\"\n```\n</Accordion>\n\n<Accordion title=\"Interactive demonstrations\">\nProvide step-by-step text instructions alongside interactive demos:\n\n```markdown\n## Interactive Demo: API Testing\n\nTry our live API explorer below, or follow these equivalent steps:\n\n1. **Set your API key:** Enter your test key in the authorization field\n2. **Choose an endpoint:** Select 'GET /users' from the dropdown\n3. **Add parameters:** Set limit=10 for the first 10 users\n4. **Send request:** Click 'Execute' to see the live response\n5. **Review response:** Examine the returned JSON structure\n\n[Interactive API Explorer Component]\n```\n</Accordion>\n</AccordionGroup>\n\n## Logical Content Structure\n\nOrganize information in a predictable hierarchy that assistive technologies can navigate effectively.\n\n### Consistent Navigation Patterns\n\nUse consistent patterns throughout your documentation:\n\n<CardGroup cols={2}>\n<Card title=\"Page Structure\" icon=\"layout\">\n- Page title (H1)\n- Introduction paragraph\n- Main sections (H2)\n- Subsections (H3)\n- Code examples\n- Next steps\n</Card>\n\n<Card title=\"Section Patterns\" icon=\"list\">\n- Descriptive heading\n- Brief overview\n- Step-by-step instructions\n- Code example\n- Expected outcome\n- Troubleshooting\n</Card>\n</CardGroup>\n\n### Skip Links and Landmarks\n\nHelp users navigate efficiently through content:\n\n<Info>\n**Navigation Strategy:** Users with screen readers often navigate by headings, landmarks, or links. Ensure your content structure supports these navigation methods.\n</Info>\n\n## Color and Visual Accessibility\n\nDon't rely solely on color to convey important information.\n\n### Color-Independent Information Design\n\nUse multiple visual cues to communicate status and importance:\n\n<CodeGroup>\n```markdown ❌ Color-Only Indicators\n❌ Red text: \"Error occurred\"\n🟡 Yellow text: \"Warning message\"  \n✅ Green text: \"Success\"\n```\n\n```markdown ✅ Multiple Visual Cues\n❌ **Error:** Invalid API key provided\n⚠️ **Warning:** Rate limit approaching (80% used)\n✅ **Success:** Configuration saved successfully\n```\n</CodeGroup>\n\n### High Contrast Content\n\nEnsure sufficient contrast between text and backgrounds:\n\n<Warning>\n**Contrast Requirements:** Text should have at least a 4.5:1 contrast ratio against its background. Large text (18pt+) needs at least 3:1 contrast.\n</Warning>\n\n## Keyboard Navigation Support\n\nEnsure all interactive elements work with keyboard navigation:\n\n### Focus Management\n\nDesign content flow that makes sense when navigating with keyboard:\n\n<Steps>\n<Step title=\"Logical tab order\">\n    Interactive elements should follow reading order (left-to-right, top-to-bottom).\n\n    ```markdown\n    ## API Key Configuration\n    \n    1. [Input field: API Key]\n    2. [Button: Test Connection]  \n    3. [Button: Save Configuration]\n    4. [Link: Advanced Settings]\n    ```\n</Step>\n\n<Step title=\"Clear focus indicators\">\n    Users should always know which element has focus.\n\n    <Note>\n    **Focus Indicators:** Ensure buttons, links, and form fields have visible focus states that are clearly distinguishable.\n    </Note>\n</Step>\n\n<Step title=\"Skip links for efficiency\">\n    Provide ways to skip repetitive content.\n\n    ```html\n    <a href=\"#main-content\" class=\"skip-link\">\n        Skip to main content\n    </a>\n    ```\n</Step>\n</Steps>\n\n## Testing Your Content\n\nRegularly test your documentation with accessibility tools and real users:\n\n<Tabs>\n<Tab title=\"Automated Testing\">\n```bash\n# Test with accessibility scanners\nnpm install -g @axe-core/cli\naxe-cli https://your-docs-site.com\n\n# Check color contrast\nnpm install -g colour-contrast-checker\ncontrast-checker \"#333333\" \"#ffffff\"\n```\n</Tab>\n\n<Tab title=\"Manual Testing\">\n**Keyboard Navigation Test:**\n1. Unplug your mouse\n2. Navigate your entire documentation using only keyboard\n3. Can you access all information and functionality?\n\n**Screen Reader Test:**\n1. Enable your OS screen reader (VoiceOver on Mac, NVDA on Windows)\n2. Navigate through your content\n3. Is all information available audibly?\n</Tab>\n\n<Tab title=\"User Testing\">\n**Include Diverse Users:**\n- Users with visual impairments\n- Users with motor disabilities  \n- Users with cognitive differences\n- Users with limited technical experience\n\n**Ask Specific Questions:**\n- Can you find how to authenticate API requests?\n- What steps would you take if you got an error?\n- Is any information unclear or confusing?\n</Tab>\n</Tabs>\n\n## Error Messages and Help Text\n\nWrite error messages and help text that are clear and actionable:\n\n<AccordionGroup>\n<Accordion title=\"Specific error descriptions\">\n```javascript\n❌ \"Authentication failed\"\n✅ \"Authentication failed: API key is missing or invalid. \n    Check that you've included the Authorization header \n    with format 'Bearer your-api-key'\"\n```\n</Accordion>\n\n<Accordion title=\"Recovery instructions\">\n```javascript\n❌ \"Network error occurred\"\n✅ \"Network error: Unable to connect to API server. \n    Check your internet connection and try again. \n    If the problem persists, check our status page \n    at status.example.com\"\n```\n</Accordion>\n\n<Accordion title=\"Helpful context\">\n```javascript\n❌ \"Invalid format\"\n✅ \"Invalid email format: Please enter a valid email address \n    like 'user@example.com'. Special characters are allowed \n    in the local part (before @).\"\n```\n</Accordion>\n</AccordionGroup>\n\n<Check>\nAccessible documentation creates better experiences for everyone—users with disabilities, non-native speakers, people in low-bandwidth environments, and anyone trying to quickly find information.\n</Check>",
    "relativePath": "writing/accessibility.mdx"
  },
  {
    "contents": "---\ntitle: 'Writing Effective Code Examples'\ndescription: 'Create code examples that users can trust, understand, and successfully implement in their projects.'\n---\n\n# Writing Effective Code Examples\n\nCode examples are often the first thing developers look for in documentation. Make them count by ensuring they're accurate, complete, and genuinely helpful.\n\n## Complete and Runnable Examples\n\nNever show partial code that won't work in isolation. Users should be able to copy your example and see it work immediately.\n\n<CodeGroup>\n```javascript ❌ Incomplete\n// Don't do this - missing imports and setup\nconst user = await getUser(userId);\nupdateProfile(user.id, { name: 'John' });\n```\n\n```javascript ✅ Complete\n// Do this - everything needed to run\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nasync function updateUserProfile(userId, updates) {\n    try {\n        const user = await prisma.user.findUnique({\n            where: { id: userId }\n        });\n        \n        if (!user) {\n            throw new Error(`User with ID ${userId} not found`);\n        }\n        \n        const updatedUser = await prisma.user.update({\n            where: { id: userId },\n            data: updates\n        });\n        \n        return updatedUser;\n    } catch (error) {\n        console.error('Failed to update user:', error);\n        throw error;\n    }\n}\n\n// Usage\nconst result = await updateUserProfile('user_123', { name: 'John Doe' });\n```\n</CodeGroup>\n\n## Error Handling That Teaches\n\nShow realistic error handling, not just the happy path. This teaches users about edge cases and builds more robust applications.\n\n<Steps>\n<Step title=\"Show common failure scenarios\">\n    Include examples of what happens when things go wrong.\n\n    ```javascript\n    async function fetchUserData(apiKey, userId) {\n        if (!apiKey) {\n            throw new Error('API key is required');\n        }\n        \n        if (!userId) {\n            throw new Error('User ID is required');\n        }\n        \n        try {\n            const response = await fetch(`/api/users/${userId}`, {\n                headers: {\n                    'Authorization': `Bearer ${apiKey}`,\n                    'Content-Type': 'application/json'\n                }\n            });\n            \n            // Handle different HTTP status codes\n            if (response.status === 401) {\n                throw new Error('Invalid API key');\n            }\n            \n            if (response.status === 404) {\n                throw new Error('User not found');\n            }\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error: ${response.status}`);\n            }\n            \n            return await response.json();\n        } catch (error) {\n            if (error.name === 'TypeError') {\n                throw new Error('Network error - check your connection');\n            }\n            throw error; // Re-throw other errors\n        }\n    }\n    ```\n</Step>\n\n<Step title=\"Demonstrate recovery strategies\">\n    Show users how to handle errors gracefully in their applications.\n\n    <Tip>\n    Include retry logic, fallback values, and user-friendly error messages.\n    </Tip>\n</Step>\n</Steps>\n\n## Realistic Data and Variables\n\nUse meaningful variable names and realistic data that helps users understand the context.\n\n<Tabs>\n<Tab title=\"Poor Example\">\n```javascript\n// Generic, unhelpful names\nconst data = await api.get('/endpoint');\nconst result = transform(data.items);\nconst output = process(result);\n```\n</Tab>\n\n<Tab title=\"Good Example\">\n```javascript\n// Descriptive, contextual names\nconst customerOrders = await orderApi.getOrders({\n    customerId: 'cust_12345',\n    status: 'pending',\n    limit: 50\n});\n\nconst formattedOrders = customerOrders.map(order => ({\n    id: order.id,\n    total: formatCurrency(order.totalAmount),\n    itemCount: order.items.length,\n    estimatedDelivery: formatDate(order.estimatedDelivery)\n}));\n\nconst orderSummary = generateOrderSummary(formattedOrders);\n```\n</Tab>\n</Tabs>\n\n## Expected Outputs and Results\n\nAlways show users what they should expect to see when running your code.\n\n**Example Request:**\n```bash\ncurl -X POST 'https://api.example.com/v1/customers' \\\n  -H 'Authorization: Bearer sk_test_123...' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"email\": \"sarah@example.com\",\n    \"name\": \"Sarah Chen\",\n    \"metadata\": {\n      \"source\": \"documentation_example\"\n    }\n  }'\n```\n\n**Expected Response:**\n```json\n{\n  \"id\": \"cust_ABcd1234efgh5678\",\n  \"email\": \"sarah@example.com\",\n  \"name\": \"Sarah Chen\",\n  \"created\": 1699123456,\n  \"metadata\": {\n    \"source\": \"documentation_example\"\n  },\n  \"default_source\": null,\n  \"subscriptions\": {\n    \"object\": \"list\",\n    \"data\": [],\n    \"has_more\": false,\n    \"total_count\": 0\n  }\n}\n```\n\n## Language-Specific Best Practices\n\nWhen showing multi-language examples, ensure each follows that language's conventions.\n\n<CodeGroup>\n```javascript JavaScript\n// Use modern JavaScript features\nconst createUser = async ({ email, name, role = 'user' }) => {\n    const userData = {\n        email,\n        name,\n        role,\n        createdAt: new Date().toISOString(),\n        id: crypto.randomUUID()\n    };\n    \n    const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(userData)\n    });\n    \n    if (!response.ok) {\n        throw new Error(`Failed to create user: ${response.statusText}`);\n    }\n    \n    return response.json();\n};\n```\n\n```python Python\n# Use Python conventions and type hints\nfrom typing import Optional, Dict, Any\nimport requests\nimport uuid\nfrom datetime import datetime\n\ndef create_user(\n    email: str, \n    name: str, \n    role: str = \"user\"\n) -> Dict[str, Any]:\n    \"\"\"Create a new user with the provided information.\"\"\"\n    user_data = {\n        \"email\": email,\n        \"name\": name,\n        \"role\": role,\n        \"created_at\": datetime.utcnow().isoformat(),\n        \"id\": str(uuid.uuid4())\n    }\n    \n    try:\n        response = requests.post(\n            \"/api/users\",\n            json=user_data,\n            headers={\"Content-Type\": \"application/json\"},\n            timeout=10\n        )\n        response.raise_for_status()\n        return response.json()\n    \n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Failed to create user: {e}\")\n```\n\n```go Go\n// Use Go conventions and proper error handling\npackage main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"net/http\"\n    \"time\"\n)\n\ntype User struct {\n    ID        string    `json:\"id\"`\n    Email     string    `json:\"email\"`\n    Name      string    `json:\"name\"`\n    Role      string    `json:\"role\"`\n    CreatedAt time.Time `json:\"created_at\"`\n}\n\nfunc CreateUser(email, name, role string) (*User, error) {\n    if role == \"\" {\n        role = \"user\"\n    }\n    \n    user := User{\n        Email:     email,\n        Name:      name,\n        Role:      role,\n        CreatedAt: time.Now().UTC(),\n    }\n    \n    jsonData, err := json.Marshal(user)\n    if err != nil {\n        return nil, fmt.Errorf(\"failed to marshal user data: %w\", err)\n    }\n    \n    resp, err := http.Post(\n        \"/api/users\",\n        \"application/json\",\n        bytes.NewBuffer(jsonData),\n    )\n    if err != nil {\n        return nil, fmt.Errorf(\"failed to send request: %w\", err)\n    }\n    defer resp.Body.Close()\n    \n    if resp.StatusCode != http.StatusOK {\n        return nil, fmt.Errorf(\"request failed with status: %s\", resp.Status)\n    }\n    \n    var createdUser User\n    if err := json.NewDecoder(resp.Body).Decode(&createdUser); err != nil {\n        return nil, fmt.Errorf(\"failed to decode response: %w\", err)\n    }\n    \n    return &createdUser, nil\n}\n```\n</CodeGroup>\n\n## Testing Your Examples\n\nBefore publishing, verify every code example works exactly as shown.\n\n<AccordionGroup>\n<Accordion title=\"Automated testing approach\">\nCreate test scripts that run your documentation examples:\n\n```javascript\n// docs-examples.test.js\nimport { test, expect } from 'vitest';\nimport { createUser, updateUserProfile } from '../examples/users.js';\n\ntest('documentation examples work correctly', async () => {\n    // Test the exact code from your docs\n    const user = await createUser({\n        email: 'test@example.com',\n        name: 'Test User'\n    });\n    \n    expect(user.id).toBeDefined();\n    expect(user.email).toBe('test@example.com');\n    \n    const updated = await updateUserProfile(user.id, {\n        name: 'Updated Name'\n    });\n    \n    expect(updated.name).toBe('Updated Name');\n});\n```\n</Accordion>\n\n<Accordion title=\"Manual verification checklist\">\nFor each code example, verify:\n- [ ] All imports and dependencies are shown\n- [ ] Code runs without modification\n- [ ] Expected output matches actual output\n- [ ] Error handling works as described\n- [ ] Performance is acceptable for the use case\n</Accordion>\n</AccordionGroup>\n\n<Warning>\nBroken code examples destroy user trust faster than missing documentation. Always test before publishing.\n</Warning>\n\n<Check>\nGreat code examples turn confused users into successful ones. Invest the time to make them excellent.\n</Check>",
    "relativePath": "writing/code-examples.mdx"
  },
  {
    "contents": "---\ntitle: 'Content Structure That Works'\ndescription: 'Learn how to organize documentation that guides users to success with clear hierarchy and logical flow.'\n---\n\n# Content Structure That Works\n\nGreat documentation isn't just about having the right information—it's about organizing that information so users can find and understand it quickly.\n\n## Start with User Intent\n\nBefore writing a single word, understand what your users are trying to accomplish. Are they trying to solve a problem, learn a concept, or complete a task?\n\n<Tip>\nAlways lead with the outcome. Tell users what they'll achieve before explaining how to do it.\n</Tip>\n\n### The Inverted Pyramid Approach\n\nStructure your content like a news article—most important information first, supporting details after.\n\n<Steps>\n<Step title=\"Lead with the outcome\">\n    Start each section by describing what the user will accomplish or learn.\n\n    ```markdown\n    # Setting Up Authentication\n    \n    By the end of this guide, you'll have secure API authentication \n    working in your application with proper error handling.\n    ```\n</Step>\n\n<Step title=\"Provide essential context\">\n    Give users the background they need to understand the instructions.\n\n    <Note>\n    Include prerequisites, assumptions, and any important warnings upfront.\n    </Note>\n</Step>\n\n<Step title=\"Detail the implementation\">\n    Break down the actual steps, code examples, and configuration details.\n</Step>\n</Steps>\n\n## Progressive Information Disclosure\n\nReveal complexity gradually. Start with the simplest case that works, then build up to more sophisticated scenarios.\n\n<Tabs>\n<Tab title=\"Basic Example\">\n```javascript\n// Start with the minimal working example\nconst response = await fetch('/api/users');\nconst users = await response.json();\n```\n</Tab>\n\n<Tab title=\"With Error Handling\">\n```javascript\n// Then show error handling\ntry {\n    const response = await fetch('/api/users');\n    if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const users = await response.json();\n} catch (error) {\n    console.error('Failed to fetch users:', error);\n}\n```\n</Tab>\n\n<Tab title=\"Production Ready\">\n```javascript\n// Finally, show production-ready implementation\nconst fetchUsers = async (options = {}) => {\n    const { timeout = 5000, retries = 3 } = options;\n    \n    for (let attempt = 1; attempt <= retries; attempt++) {\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(() => controller.abort(), timeout);\n            \n            const response = await fetch('/api/users', {\n                signal: controller.signal,\n                headers: {\n                    'Authorization': `Bearer ${getToken()}`,\n                    'Content-Type': 'application/json'\n                }\n            });\n            \n            clearTimeout(timeoutId);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            \n            return await response.json();\n        } catch (error) {\n            if (attempt === retries) throw error;\n            await new Promise(resolve => setTimeout(resolve, 1000 * attempt));\n        }\n    }\n};\n```\n</Tab>\n</Tabs>\n\n## Scannable Content Design\n\nMost users scan before they read. Design your content to support this behavior.\n\n### Effective Heading Hierarchy\n\nUse headings to create a clear content outline:\n\n```markdown\n# Main Topic (H1)\n## Primary Sections (H2)\n### Subsections (H3)\n#### Details (H4 - use sparingly)\n```\n\n<Warning>\nNever skip heading levels. Going from H2 to H4 breaks screen readers and confuses users.\n</Warning>\n\n### Strategic Use of Lists\n\nBreak up dense text with lists when you have:\n- Multiple related items\n- Sequential steps\n- Options or alternatives\n- Key points to emphasize\n\n<AccordionGroup>\n<Accordion title=\"When to use numbered lists\">\nUse numbered lists for:\n- Sequential procedures\n- Ranked items\n- References to specific steps\n</Accordion>\n\n<Accordion title=\"When to use bullet points\">\nUse bullet points for:\n- Related but unordered items\n- Feature lists\n- Benefits or advantages\n- Non-sequential information\n</Accordion>\n</AccordionGroup>\n\n## Context and Prerequisites\n\nNever assume users have the same context you do. Explicitly state what they need to know or have ready.\n\n<CodeGroup>\n```markdown Good Example\n# Installing the CLI Tool\n\n**Prerequisites:**\n- Node.js 18 or higher\n- npm or yarn package manager\n- Basic familiarity with command line\n\n**What you'll need:**\n- API key from your dashboard\n- 10 minutes to complete setup\n```\n\n```markdown Poor Example\n# Installing the CLI Tool\n\nJust run the install command and configure your API key.\n```\n</CodeGroup>\n\n## Next Steps Navigation\n\nEnd each section by guiding users to their next logical action.\n\n<CardGroup cols={2}>\n<Card title=\"Quick Start Guide\" icon=\"rocket\" href=\"/quickstart\">\nReady to implement? Follow our step-by-step setup guide.\n</Card>\n\n<Card title=\"Advanced Configuration\" icon=\"cog\" href=\"/config\">\nNeed custom behavior? Explore advanced configuration options.\n</Card>\n</CardGroup>\n\n<Info>\nGood content structure makes documentation feel effortless to navigate, even for complex topics.\n</Info>",
    "relativePath": "writing/content-structure.mdx"
  },
  {
    "contents": "---\ntitle: 'User-Focused Documentation'\ndescription: 'Write documentation that solves real problems by understanding your users goals, context, and challenges.'\n---\n\n# User-Focused Documentation\n\nThe best documentation doesn't just explain features—it helps users accomplish their goals. Focus on outcomes, not just functionality.\n\n## Understanding User Intent\n\nBefore documenting any feature, understand the jobs users are trying to do. Documentation should bridge the gap between what users want to achieve and how your product helps them get there.\n\n<Tabs>\n<Tab title=\"Feature-Focused (❌)\">\n```markdown\n# WebhookManager Class\n\nThe WebhookManager class provides methods for webhook management:\n\n- `create(url, events)` - Creates a webhook\n- `update(id, options)` - Updates webhook settings  \n- `delete(id)` - Removes a webhook\n- `list()` - Returns all webhooks\n```\n</Tab>\n\n<Tab title=\"User-Focused (✅)\">\n```markdown\n# Getting Notified of Events\n\nSet up webhooks to automatically receive notifications when important \nevents happen in your application, like new orders or payment completions.\n\n## Quick Setup\n\nGet real-time notifications in under 5 minutes:\n\n1. Choose which events to monitor\n2. Provide your endpoint URL\n3. Test the connection\n4. Go live\n\nBy the end of this guide, you'll receive automatic notifications \nwhenever customers place orders.\n```\n</Tab>\n</Tabs>\n\n## Write for Different Experience Levels\n\nYour users range from beginners exploring your platform to experts implementing complex integrations. Provide multiple pathways without overwhelming anyone.\n\n<Steps>\n<Step title=\"Lead with the simple path\">\n    Start every guide with the most straightforward approach that works.\n\n    <Note>\n    Most users want the quickest solution that meets their needs. Advanced options can come later.\n    </Note>\n\n    ```markdown\n    # Quick Start: Send Your First Email\n\n    Send a test email in 3 lines of code:\n\n    ```javascript\n    import { EmailAPI } from '@company/sdk';\n    const client = new EmailAPI('your-api-key');\n    await client.send({\n        to: 'user@example.com',\n        subject: 'Hello World',\n        html: '<h1>It works!</h1>'\n    });\n    ```\n</Step>\n\n<Step title=\"Provide escape hatches for complexity\">\n    Offer advanced options without cluttering the main flow.\n\n    <AccordionGroup>\n    <Accordion title=\"Advanced: Custom templates and variables\">\n        ```javascript\n        await client.send({\n            to: 'user@example.com',\n            template: 'welcome-series',\n            variables: {\n                firstName: user.firstName,\n                activationUrl: generateActivationUrl(user.id)\n            },\n            scheduling: {\n                sendAt: new Date(Date.now() + 24 * 60 * 60 * 1000)\n            },\n            tracking: {\n                opens: true,\n                clicks: true,\n                unsubscribes: true\n            }\n        });\n        ```\n    </Accordion>\n    </AccordionGroup>\n</Step>\n</Steps>\n\n## Address User Context and Constraints\n\nReal users work within constraints. Acknowledge their environment and provide practical guidance.\n\n### Common User Situations\n\n<CardGroup cols={2}>\n<Card title=\"Time-Pressured Developers\" icon=\"clock\">\n**Need:** Working solutions fast\n**Provide:** Copy-paste examples, quick setup guides, common patterns\n</Card>\n\n<Card title=\"Security-Conscious Teams\" icon=\"shield\">\n**Need:** Understanding security implications\n**Provide:** Best practices, security considerations, compliance notes\n</Card>\n\n<Card title=\"Scaling Businesses\" icon=\"trending-up\">\n**Need:** Performance and reliability info\n**Provide:** Rate limits, error handling, monitoring guidance\n</Card>\n\n<Card title=\"Budget-Conscious Users\" icon=\"dollar-sign\">\n**Need:** Cost understanding and optimization\n**Provide:** Pricing impact, optimization tips, free tier guidance\n</Card>\n</CardGroup>\n\n## Anticipate and Answer Questions\n\nGreat documentation answers questions before users ask them. Think about what could go wrong or what users might wonder about.\n\n<Warning>\nDon't just document the happy path. Users encounter edge cases, errors, and unexpected situations.\n</Warning>\n\n### Proactive Problem Solving\n\nAddress common confusion points inline:\n\n```markdown\n# Setting Up Your Development Environment\n\nInstall the CLI tool globally to use it from any project:\n\n```bash\nnpm install -g @company/cli\n```\n\n<Info>\n**Why global?** Installing globally lets you run `company-cli` from any \ndirectory, which is essential for initializing new projects.\n</Info>\n\n**Already have an older version?** Update with the same command. \nThe installer will replace your existing version.\n\n**Permission errors on macOS/Linux?** Try `sudo npm install -g @company/cli` \nor use a Node version manager like nvm to avoid permission issues.\n```\n\n### Include Realistic Troubleshooting\n\n<AccordionGroup>\n<Accordion title=\"API key not working\">\n**Symptoms:** Getting 401 Unauthorized errors\n\n**Causes:**\n- Using test key in production (or vice versa)\n- Key has expired or been revoked  \n- Missing `Bearer ` prefix in Authorization header\n\n**Solutions:**\n1. Verify you're using the correct environment key\n2. Check key status in your dashboard\n3. Ensure header format: `Authorization: Bearer your-key-here`\n</Accordion>\n\n<Accordion title=\"Webhook not receiving events\">\n**Symptoms:** Events happening but webhook endpoint not called\n\n**Causes:**\n- Endpoint URL not publicly accessible\n- SSL certificate issues\n- Webhook disabled or pointing to wrong URL\n\n**Solutions:**\n1. Test endpoint with curl or Postman\n2. Check SSL certificate validity\n3. Verify webhook configuration in dashboard\n4. Review webhook logs for delivery attempts\n</Accordion>\n</AccordionGroup>\n\n## Use Action-Oriented Language\n\nWrite instructions that clearly tell users what to do, using strong action verbs and specific directions.\n\n<CodeGroup>\n```markdown Weak Instructions\nYou can configure the timeout setting if needed.\nThe response will contain user information.\nIt's possible to customize the error messages.\n```\n\n```markdown Strong Instructions\nSet the timeout to 30 seconds for slow networks:\n`config.timeout = 30000`\n\nExtract the user's email from the response:\n`const email = response.user.email`\n\nCustomize error messages for better UX:\n`config.errorMessages.invalid = \"Please check your input\"`\n```\n</CodeGroup>\n\n## Validate User Success\n\nHelp users confirm they're on the right track with clear success indicators.\n\n<Steps>\n<Step title=\"Install the package\">\n    ```bash\n    npm install @company/sdk\n    ```\n\n    <Check>\n    **Success indicator:** You should see the package added to your `package.json` \n    dependencies and a confirmation message in your terminal.\n    </Check>\n</Step>\n\n<Step title=\"Test the connection\">\n    ```javascript\n    import { Client } from '@company/sdk';\n    \n    const client = new Client('your-api-key');\n    const health = await client.health.check();\n    console.log(health);\n    ```\n\n    <Check>\n    **Expected output:** \n    ```json\n    { \n        \"status\": \"healthy\", \n        \"timestamp\": \"2024-01-15T10:30:00Z\",\n        \"region\": \"us-east-1\"\n    }\n    ```\n    </Check>\n</Step>\n</Steps>\n\n## Show the Impact\n\nConnect features to business outcomes so users understand the value of implementation effort.\n\n<Info>\n**Why this matters:** When users understand the business impact, they're more likely to invest time in proper implementation and convince stakeholders to adopt your solution.\n</Info>\n\n```markdown\n# Rate Limiting Best Practices\n\nImplementing proper rate limiting protects your application from:\n\n- **Service outages** from traffic spikes (saves potential downtime costs)\n- **Unexpected API bills** from runaway scripts (prevents budget overruns)  \n- **Poor user experience** during peak usage (maintains customer satisfaction)\n\n## Implementation Impact\n\n**Before rate limiting:**\n- 40% of API errors during traffic spikes\n- Average response time: 2.3 seconds\n- 15% higher infrastructure costs\n\n**After implementation:**\n- 2% API error rate under same load\n- Average response time: 480ms\n- 20% reduction in infrastructure costs\n```\n\n<Tip>\nThe best user-focused documentation feels like having an expert teammate who understands your goals and constraints, not just someone reading features from a spec sheet.\n</Tip>",
    "relativePath": "writing/user-focused.mdx"
  },
  {
    "contents": "---\ntitle: 'Visual Design for Documentation'\ndescription: 'Use visual elements strategically to improve comprehension, reduce cognitive load, and guide users through complex information.'\n---\n\n# Visual Design for Documentation\n\nGood visual design in documentation isn't about making things pretty—it's about making complex information easier to understand and act upon.\n\n## Strategic Use of Visual Components\n\nEvery visual element should serve a purpose: reducing cognitive load, highlighting important information, or guiding user attention.\n\n### Callouts That Guide Decision Making\n\nUse callouts to break users out of autopilot reading and draw attention to critical information.\n\n<Tabs>\n<Tab title=\"Poor Usage\">\n<Note>\nYou can also use the advanced configuration options.\n</Note>\n\n<Warning>  \nThis might not work in all cases.\n</Warning>\n\n<Tip>\nThere are several ways to do this.\n</Tip>\n</Tab>\n\n<Tab title=\"Strategic Usage\">\n<Warning>\n**Data Loss Risk:** This action permanently deletes all user data and cannot be undone. Only proceed if you have confirmed backups.\n</Warning>\n\n<Tip>\n**Performance Optimization:** Set `batchSize: 100` for datasets larger than 10,000 records to avoid memory issues and improve processing speed.\n</Tip>\n\n<Check>\n**Verification Complete:** Your SSL certificate is properly configured. Users will see the secure lock icon when accessing your application.\n</Check>\n</Tab>\n</Tabs>\n\n### Visual Hierarchy with Typography\n\nCreate clear information hierarchy using heading levels, text styling, and spacing.\n\n<Steps>\n<Step title=\"Establish clear heading levels\">\n    Use consistent heading hierarchy to create scannable content structure.\n\n    ```markdown\n    # Main Feature (H1)\n    ## Setup Process (H2)  \n    ### Individual Steps (H3)\n    #### Implementation Details (H4)\n    ```\n\n    <Info>\n    **Heading Strategy:** Users scan headings first. Make them descriptive and outcome-focused rather than feature-focused.\n    </Info>\n</Step>\n\n<Step title=\"Use emphasis purposefully\">\n    **Bold text** for critical terms and concepts users need to remember.\n    \n    *Italic text* for emphasis within sentences and technical terms.\n    \n    `Code formatting` for exact values, filenames, and commands.\n\n    <Note>\n    Avoid overusing emphasis—when everything is highlighted, nothing stands out.\n    </Note>\n</Step>\n</Steps>\n\n## Color and Visual Signals\n\nUse Fumabase's color system to create consistent visual meaning throughout your documentation.\n\n### Semantic Color Usage\n\n<AccordionGroup>\n<Accordion title=\"Success States (Green/Check)\">\nUse green and check icons for:\n- Successful completions\n- Positive confirmations  \n- Achievement indicators\n- Correct examples\n\n<Check>\n**API Connection Successful:** Your application is now connected and ready to process requests.\n</Check>\n</Accordion>\n\n<Accordion title=\"Warning States (Yellow/Orange)\">\nUse warning colors for:\n- Important cautions\n- Breaking changes\n- Performance considerations\n- Non-destructive issues\n\n<Warning>\n**Rate Limit Approaching:** You're at 80% of your monthly API quota. Consider upgrading your plan to avoid service interruptions.\n</Warning>\n</Accordion>\n\n<Accordion title=\"Informational States (Blue)\">\nUse blue for:\n- Helpful context\n- Additional information\n- Process explanations\n- Neutral announcements\n\n<Info>\n**Context:** This endpoint returns cached data that updates every 15 minutes. For real-time data, use the `/live` endpoint instead.\n</Info>\n</Accordion>\n</AccordionGroup>\n\n## Content Organization Patterns\n\nStructure information visually to match how users consume technical content.\n\n### Scannable Code Examples\n\nMake code examples easy to scan and understand at a glance:\n\n<CodeGroup>\n```javascript ❌ Hard to Scan\nconst result = await fetch('/api/users/123', {headers: {'Authorization': 'Bearer ' + token, 'Content-Type': 'application/json'}}).then(r => r.json()).catch(e => console.error(e));\n```\n\n```javascript ✅ Easy to Scan\nconst result = await fetch('/api/users/123', {\n    headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n    }\n});\n\nif (!result.ok) {\n    throw new Error(`HTTP error! status: ${result.status}`);\n}\n\nconst userData = await result.json();\n```\n</CodeGroup>\n\n### Progressive Information Disclosure\n\nUse expandable sections to hide complexity until users need it:\n\n<Accordion title=\"Basic configuration (most users start here)\">\n```javascript\nconst config = {\n    apiKey: 'your-key-here',\n    environment: 'production'\n};\n```\n</Accordion>\n\n<Accordion title=\"Advanced configuration (when you need more control)\">\n```javascript\nconst config = {\n    apiKey: 'your-key-here',\n    environment: 'production',\n    timeout: 30000,\n    retries: 3,\n    backoff: {\n        initial: 1000,\n        max: 10000,\n        multiplier: 2\n    },\n    headers: {\n        'User-Agent': 'MyApp/1.0',\n        'X-Custom-Header': 'value'\n    },\n    interceptors: {\n        request: (config) => {\n            console.log('Request:', config);\n            return config;\n        },\n        response: (response) => {\n            console.log('Response:', response.status);\n            return response;\n        }\n    }\n};\n```\n</Accordion>\n\n## Visual Flow and Navigation\n\nDesign visual pathways that guide users through complex processes.\n\n### Step-by-Step Visual Flow\n\n<Steps>\n<Step title=\"Plan your integration\">\n    Decide which features you need and review the API endpoints you'll use.\n\n    <CardGroup cols={2}>\n    <Card title=\"User Management\" icon=\"users\" href=\"/api/users\">\n    Create, update, and manage user accounts\n    </Card>\n    \n    <Card title=\"Payment Processing\" icon=\"credit-card\" href=\"/api/payments\">\n    Handle payments and subscription billing\n    </Card>\n    </CardGroup>\n</Step>\n\n<Step title=\"Set up authentication\">\n    Generate API keys and configure your application for secure access.\n\n    <Frame>\n    <img src=\"/images/api-key-generation.png\" alt=\"API key generation interface showing create new key button\" />\n    </Frame>\n\n    <Tip>\n    **Security Best Practice:** Store API keys as environment variables, never in your source code.\n    </Tip>\n</Step>\n\n<Step title=\"Test your integration\">\n    Make a test API call to verify everything is working correctly.\n\n    **Example Request:**\n    ```bash\n    curl -X GET 'https://api.example.com/v1/auth/test' \\\n        -H 'Authorization: Bearer your-api-key-here'\n    ```\n\n    **Expected Response:**\n    ```json\n    {\n        \"authenticated\": true,\n        \"user\": \"your-app-name\",\n        \"permissions\": [\"read\", \"write\"]\n    }\n    ```\n</Step>\n</Steps>\n\n### Choice Architecture\n\nPresent options in a way that guides users toward the best path for their situation:\n\n<Tabs>\n<Tab title=\"I'm just exploring\">\n**Quick Setup (5 minutes)**\n\nGet a feel for the API with our interactive sandbox:\n\n```bash\nnpx @company/quickstart\n```\n\nPerfect for: Learning the basics, proof of concepts\n</Tab>\n\n<Tab title=\"I'm building a prototype\">\n**Development Setup (15 minutes)**\n\nSet up a development environment with test data:\n\n```bash\ngit clone https://github.com/company/starter-template\ncd starter-template && npm install\nnpm run dev\n```\n\nPerfect for: MVP development, internal demos\n</Tab>\n\n<Tab title=\"I'm going to production\">\n**Production Setup (30 minutes)**\n\nComplete setup with security, monitoring, and scaling considerations:\n\n- Security configuration and key management\n- Error handling and retry logic  \n- Monitoring and alerting setup\n- Performance optimization\n\nPerfect for: Customer-facing applications, production workloads\n</Tab>\n</Tabs>\n\n## Images and Diagrams\n\nUse visual media strategically to clarify complex concepts and processes.\n\n### Effective Screenshot Usage\n\n<Frame caption=\"Dashboard overview showing key metrics and navigation\">\n<img src=\"/images/dashboard-overview.png\" alt=\"Application dashboard with navigation sidebar, metrics cards showing 1.2K users and $45K revenue, and a chart displaying growth trends over time\" />\n</Frame>\n\n<Tip>\n**Screenshot Best Practices:**\n- Use consistent browser/app styling across all screenshots\n- Highlight interactive elements with subtle borders or arrows\n- Include realistic but safe data (no real user information)\n- Keep images up-to-date with current UI\n</Tip>\n\n### Conceptual Diagrams\n\nFor complex workflows, create simple diagrams that show relationships and data flow:\n\n```mermaid\ngraph TD\n    A[User Request] --> B{Authentication}\n    B -->|Valid| C[Process Request]\n    B -->|Invalid| D[Return 401 Error]\n    C --> E[Database Query]\n    E --> F[Format Response]\n    F --> G[Return Data]\n    D --> H[Log Security Event]\n```\n\n<Warning>\n**Accessibility Note:** Always include descriptive alt text for images and provide text alternatives for diagram information.\n</Warning>\n\n<Check>\nGreat visual design makes documentation feel effortless to navigate, even when covering complex technical topics.\n</Check>",
    "relativePath": "writing/visual-design.mdx"
  }
]