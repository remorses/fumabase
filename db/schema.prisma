generator client {
  provider = "prisma-client"
  output   = "src/generated"

  moduleFormat = "esm"
  engineType   = "client"

  previewFeatures = ["driverAdapters", "queryCompiler"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id
  name             String      @db.Text
  email            String
  emailVerified    Boolean
  image            String?     @db.Text
  createdAt        DateTime
  updatedAt        DateTime
  twoFactorEnabled Boolean?
  username         String?
  sessions         Session[]
  accounts         Account[]
  twofactors       TwoFactor[]
  orgs             OrgsUsers[]
  chats            Chat[]
  cliLoginSessions CliLoginSession[]
  apikeys           ApiKey[]

  @@unique([email])
  @@unique([username])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime
}

model Verification {
  id         String    @id
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

model TwoFactor {
  id          String @id
  secret      String @db.Text
  backupCodes String @db.Text
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  MEMBER
  GUEST
}

enum PaymentProvider {
  stripe
}

enum SubscriptionStatus {
  on_trial
  active
  paused
  past_due
  unpaid
  cancelled
  expired
}

model OrgsUsers {
  userId String
  orgId  String
  role   UserRole @default(MEMBER)
  // guestSiteIds String[]
  org    Org      @relation(fields: [orgId], references: [orgId], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, orgId])
  @@index([orgId])
  @@index([userId])
}

model OrgInviteLink {
  createdAt DateTime @default(now())
  key       String   @id
  orgId     String
  forSiteId String?
  forPageId String?
  org       Org      @relation(fields: [orgId], references: [orgId], onDelete: Cascade)
}

model Org {
  orgId            String   @id @default(cuid())
  name             String   @default("")
  image            String?  @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  stripeCustomerId String?

  invitationLinks OrgInviteLink[]
  users           OrgsUsers[]

  subscriptions       Subscription[]
  sites               Site[]
  githubInstallations OrgGithubInstallation[]
}

model Subscription {
  subscriptionId String
  orderId        String?
  variantId      String
  productId      String
  variantName    String?
  createdAt      DateTime           @default(now())
  status         SubscriptionStatus
  endsAt         DateTime?
  email          String?            @db.VarChar(255)
  orgId          String
  provider       PaymentProvider    @default(stripe)
  itemId         String?            @unique
  quantity       Int                @default(1)
  org            Org                @relation(fields: [orgId], references: [orgId], onDelete: Cascade)

  @@id([subscriptionId, variantId])
  @@index([orgId])
}

model Site {
  siteId String  @id @default(cuid())
  name   String?
  orgId  String

  defaultLocale String @default("en")

  org Org @relation(fields: [orgId], references: [orgId], onDelete: Cascade)

  createdAt DateTime @default(now())

  branches SiteBranch[]

  githubOwner String
  githubRepo  String

  mediaAssets MediaAsset[]
  locales     SiteEnabledLocale[]

  githubInstallations SiteGithubInstallation[]

  @@index([createdAt])
}

model SiteBranch {
  branchId     String @id @default(cuid())
  site         Site   @relation(fields: [siteId], references: [siteId], onDelete: Cascade)
  siteId       String
  title        String
  githubBranch String @default("main")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trieveDatasetId  String?
  trieveReadApiKey String?
  docsJson         Json     @default("{}")
  cssStyles        String   @default("")
  domains          Domain[]

  pages       MarkdownPage[]
  mediaAssets MediaAsset[]
  metaFiles   MetaFile[]

  chats    Chat[]
  feedback PageFeedback[]
}

model MarkdownPage {
  pageId       String     @id @default(cuid())
  slug         String
  // id    String @unique @id
  branchId     String
  branch       SiteBranch @relation(fields: [branchId], references: [branchId], onDelete: Cascade)
  title        String     @db.Text
  markdown     String     @db.Text
  createdAt    DateTime   @default(now())
  // updatedAt DateTime @updatedAt
  lastEditedAt DateTime?  @updatedAt

  // ogImage      String?           @db.Text
  description String? @db.Text
  // keywords     String?           @db.Text
  icon        String?
  /// [FrontmatterJson]
  frontmatter Json?

  extension MarkdownExtension @default(mdx)

  githubSha      String
  githubPath     String
  structuredData Json   @default("{}")
  syncErrors MarkdownPageSyncError[]

  @@unique([branchId, slug])
  @@index([branchId])
  @@index([slug])
}

enum MarkdownExtension {
  mdx
  md
}

model MediaAsset {
  siteId     String
  branchId   String
  slug       String
  branch     SiteBranch @relation(fields: [branchId], references: [branchId], onDelete: Cascade)
  githubSha  String
  site       Site       @relation(fields: [siteId], references: [siteId], onDelete: Cascade)
  githubPath String
  width      Int?
  height     Int?
  bytes Int @default(0)

  @@id([slug, branchId])
}

model MetaFile {
  githubPath String
  branchId   String
  jsonData   Json
  githubSha  String

  branch SiteBranch @relation(fields: [branchId], references: [branchId], onDelete: Cascade)

  @@id([githubPath, branchId])
}

enum DomainType {
  customDomain
  internalDomain
}

model Domain {
  id   String @id @default(cuid())
  host String @unique

  domainType DomainType

  // isVercelVerified Boolean?
  // lastCheck        DateTime?
  branch   SiteBranch? @relation(fields: [branchId], references: [branchId])
  branchId String?
}

model SiteGithubInstallation {
  installationId Int
  appId          String
  siteId         String
  site           Site               @relation(fields: [siteId], references: [siteId], onDelete: Cascade)
  github         GithubInstallation @relation(fields: [installationId, appId], references: [installationId, appId], onDelete: Cascade)

  @@id([installationId, appId, siteId])
}

model OrgGithubInstallation {
  installationId Int
  appId          String
  orgId          String
  org            Org                @relation(fields: [orgId], references: [orgId], onDelete: Cascade)
  github         GithubInstallation @relation(fields: [installationId, appId], references: [installationId, appId], onDelete: Cascade)

  @@id([installationId, appId, orgId])
}

model GithubInstallation {
  installationId   Int
  accountLogin     String   @default("")
  appId            String
  accountAvatarUrl String   @default("")
  createdAt        DateTime @default(now())

  oauthToken   String?
  status       String            @default("active")
  memberLogins String[]          @default([])
  accountType  GithubAccountType @default(USER)

  sites SiteGithubInstallation[]
  orgs  OrgGithubInstallation[]

  @@id([installationId, appId])
}

enum GithubAccountType {
  USER
  ORGANIZATION
}

model SiteEnabledLocale {
  locale String
  siteId String
  site   Site   @relation(fields: [siteId], references: [siteId], onDelete: Cascade)

  @@id([locale, siteId])
}

// ─── ENUMS ─────────────────────────────────────────────────────────────

enum ChatMessageRole {
  system
  user
  assistant
}

enum ChatMessagePartType {
  text
  reasoning
  // TODO use enum instead of string when prisma fixes https://github.com/prisma/prisma/issues/8446
  tool_invocation @map("tool-invocation")
  source
  file
}

// ─── MODELS ────────────────────────────────────────────────────────────

model Chat {
  chatId          String        @id @default(cuid())
  title           String?
  description     String?
  messages        ChatMessage[]
  // siteId          String
  // site            Site          @relation(fields: [siteId], references: [siteId], onDelete: Cascade)
  // a chat is different for each user, this is to prevent the case where 2 users are updating the same chat, causing data loos and override. instead each user sees a different set of chats so they cannot possibly override each other chats.
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  currentSlug     String?
  filesInDraft    Json          @default("{}")
  lastPushedFiles Json          @default("{}")
  prNumber        Int?
  branchId        String
  branch          SiteBranch    @relation(fields: [branchId], references: [branchId], onDelete: Cascade)
  // addedLines   Int           @default(0)
  // deletedLines Int           @default(0)
}

model ChatMessage {
  id        String            @id @default(cuid())
  chat      Chat              @relation(fields: [chatId], references: [chatId], onDelete: Cascade)
  chatId    String
  role      ChatMessageRole
  parts     ChatMessagePart[]
  // preview for simple text message parts
  content   String            @default("") @db.Text
  createdAt DateTime          @default(now())
}

model ChatMessagePart {
  id        String      @id @default(cuid())
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  index Int

  type           String
  text           String? @db.Text
  toolInvocation Json?
}

enum PageOpinion {
  good
  bad
}

model PageFeedback {
  id            String      @id @default(cuid())
  // siteId        String
  // site          Site        @relation(fields: [siteId], references: [siteId], onDelete: Cascade)
  url           String      @db.Text
  opinion       PageOpinion @default(good)
  message       String?     @db.Text
  discussionUrl String
  branchId      String
  branch        SiteBranch  @relation(fields: [branchId], references: [branchId], onDelete: Cascade)

  ipHash    String   @default("")
  createdAt DateTime @default(now())
}


model CliLoginSession {
  secret String @id
  userId String
  apiKey String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model ApiKey {
  id                  String    @id
  name                String?
  start               String?
  prefix              String?
  key                 String
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  refillInterval      Int?
  refillAmount        Int?
  lastRefillAt        DateTime?
  enabled             Boolean?
  rateLimitEnabled    Boolean?
  rateLimitTimeWindow Int?
  rateLimitMax        Int?
  requestCount        Int?
  remaining           Int?
  lastRequest         DateTime?
  expiresAt           DateTime?
  createdAt           DateTime
  updatedAt           DateTime
  permissions         String?
  metadata            String?

}

enum MarkdownPageSyncErrorType {
   render
   mdxParse
   mdParse
}


model MarkdownPageSyncError {

  pageId String
  line Int
  errorMessage String
  page MarkdownPage @relation(fields: [pageId], references: [pageId], onDelete: Cascade)
  errorType MarkdownPageSyncErrorType

  @@id([pageId, line])

}
