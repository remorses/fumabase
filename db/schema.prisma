generator client {
  provider = "prisma-client"
  output   = "src/generated"

  moduleFormat = "esm"
  engineType   = "client"

  previewFeatures = ["driverAdapters", "queryCompiler"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id
  name             String      @db.Text
  email            String
  emailVerified    Boolean
  image            String?     @db.Text
  createdAt        DateTime
  updatedAt        DateTime
  twoFactorEnabled Boolean?
  username         String?
  sessions         Session[]
  accounts         Account[]
  twofactors       TwoFactor[]
  orgs             OrgsUsers[]

  @@unique([email])
  @@unique([username])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime
}

model Verification {
  id         String    @id
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

model TwoFactor {
  id          String @id
  secret      String @db.Text
  backupCodes String @db.Text
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  MEMBER
  GUEST
}

enum PaymentProvider {
  stripe
}

enum SubscriptionStatus {
  on_trial
  active
  paused
  past_due
  unpaid
  cancelled
  expired
}

model OrgsUsers {
  userId String
  orgId  String
  role   UserRole @default(MEMBER)
  // guestSiteIds String[]
  org    Org      @relation(fields: [orgId], references: [orgId], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, orgId])
  @@index([orgId])
  @@index([userId])
}

model OrgInviteLink {
  createdAt DateTime @default(now())
  key       String   @id
  orgId     String
  forSiteId String?
  forPageId String?
  org       Org      @relation(fields: [orgId], references: [orgId], onDelete: Cascade)
}

model Org {
  orgId            String   @id @default(cuid())
  name             String   @default("")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  stripeCustomerId String?

  invitationLinks OrgInviteLink[]
  users           OrgsUsers[]

  subscriptions Subscription[]
  sites         Site[]
}

model Subscription {
  subscriptionId String
  orderId        String?
  variantId      String
  productId      String
  variantName    String?
  createdAt      DateTime           @default(now())
  status         SubscriptionStatus
  endsAt         DateTime?
  email          String?            @db.VarChar(255)
  orgId          String
  provider       PaymentProvider    @default(stripe)
  itemId         String?            @unique
  quantity       Int                @default(1)
  org            Org                @relation(fields: [orgId], references: [orgId], onDelete: Cascade)

  @@id([subscriptionId, variantId])
  @@index([orgId])
}

model Tab {
  tabId     String   @id @default(cuid())
  site      Site     @relation(fields: [siteId], references: [siteId], onDelete: Cascade)
  siteId    String
  title     String
  // slug      String
  // enabled   Boolean    @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pages       MarkdownPage[]
  mediaAssets MediaAsset[]
  metaFiles   MetaFile[]

  // @@unique([siteId, slug])
}

model MarkdownPage {
  pageId       String    @id @default(cuid())
  slug         String
  // id    String @unique @id
  tabId        String
  tab          Tab       @relation(fields: [tabId], references: [tabId], onDelete: Cascade)
  title        String    @db.Text
  markdown     String    @db.Text
  createdAt    DateTime  @default(now())
  // updatedAt DateTime @updatedAt
  lastEditedAt DateTime?

  // ogImage      String?           @db.Text
  description String? @db.Text
  // keywords     String?           @db.Text
  icon        String?
  /// [FrontmatterJson]
  frontmatter Json?

  extension MarkdownExtension @default(mdx)

  githubSha      String
  githubPath     String
  structuredData Json   @default("{}")

  @@unique([tabId, slug])
  @@index([tabId])
  @@index([slug])
}

enum MarkdownExtension {
  mdx
  md
}

model Site {
  siteId String  @id @default(cuid())
  name   String?
  orgId  String

  defaultLocale String @default("en")

  org Org @relation(fields: [orgId], references: [orgId], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  trieveDatasetId  String?
  trieveReadApiKey String?

  tabs               Tab[]
  domains            Domain[]
  githubInstallation GithubInstallation? @relation(fields: [installationId, orgId], references: [installationId, orgId])
  installationId     Int?
  customization      SiteCustomization?
  githubOwner        String
  githubRepo         String
  mediaAssets        MediaAsset[]
  locales            SiteEnabledLocale[]

  @@index([createdAt])
}

model MediaAsset {
  siteId     String
  tabId      String
  slug       String
  tab        Tab    @relation(fields: [tabId], references: [tabId], onDelete: Cascade)
  githubSha  String
  site       Site   @relation(fields: [siteId], references: [siteId], onDelete: Cascade)
  githubPath String
  width      Int?
  height     Int?

  @@id([slug, tabId])
}

model MetaFile {
  githubPath String
  tabId      String
  jsonData   Json
  githubSha  String

  tab Tab @relation(fields: [tabId], references: [tabId], onDelete: Cascade)

  @@id([githubPath, tabId])
}

enum DomainType {
  customDomain
  internalDomain
}

model Domain {
  id         String     @id @default(cuid())
  host       String     @unique
  siteId     String
  domainType DomainType
  site       Site       @relation(fields: [siteId], references: [siteId], onDelete: Cascade)

  // isVercelVerified Boolean?
  // lastCheck        DateTime?
}

model GithubInstallation {
  installationId   Int
  accountLogin     String            @default("")
  appId            String
  accountAvatarUrl String            @default("")
  createdAt        DateTime          @default(now())
  orgId            String
  oauthToken       String?
  status           String            @default("active")
  accountType      GithubAccountType @default(USER)
  memberLogins     String[]          @default([])
  sites            Site[]

  @@id([installationId, orgId])
}

enum GithubAccountType {
  USER
  ORGANIZATION
}

model SiteCustomization {
  siteId     String  @id
  faviconUrl String?
  logoUrl    String?
  color      String?
  site       Site    @relation(fields: [siteId], references: [siteId], onDelete: Cascade)
}

model SiteEnabledLocale {
  locale String
  siteId String
  site   Site   @relation(fields: [siteId], references: [siteId], onDelete: Cascade)

  @@id([locale, siteId])
}

// ─── ENUMS ─────────────────────────────────────────────────────────────

enum ChatMessageRole {
  system
  user
  assistant
}

enum ChatMessagePartType {
  text
  reasoning
  tool_invocation
  source
  file
  // `step_start` removed – see note below
}

// ─── MODELS ────────────────────────────────────────────────────────────

model Chat {
  chatId             String        @id @default(cuid())
  title              String?
  messages           ChatMessage[]
  createdAt          DateTime      @default(now())
  fileUpdatesInDraft Json          @default("{}")
}

model ChatMessage {
  id        String            @id @default(cuid())
  chat      Chat              @relation(fields: [chatId], references: [chatId], onDelete: Cascade)
  chatId    String
  role      ChatMessageRole
  parts     ChatMessagePart[]
  // metadata  Json?
  createdAt DateTime          @default(now())
}

model ChatMessagePart {
  id        String      @id @default(cuid())
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  index Int

  type ChatMessagePartType
  text String?             @db.Text
  data Json? // structured payloads
}
